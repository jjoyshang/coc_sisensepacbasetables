/* VOTER CONTACT  
https://platform.civisanalytics.com/spa/#/scripts/sql/120918352 */

/* This table belongs to a set of base tables that pull important metrics for assessing our work on PAC races.
Here we are looking at the Manhattan DA Race 2021-06

This table brings in information on our Voter Contact efforts from ThruTalk and ThruText. The select include whether the 
contact was through Phone or Text, the unique can id of the voter contacted, whether we successully reached and 
had a conversation with the voter, and the latitude + longitude of the voter's address.
*/

DELETE FROM coc_reporting.pacraces_20212022_votercontact WHERE election = '{{election_name}}';
INSERT INTO coc_reporting.pacraces_20212022_votercontact (
/* There are two CTEs for ThruTalk voter contact. This is the main table, which includes information on how many calls we 
did and which voter we reached. */
WITH thrutalk_1 AS (
  SELECT DISTINCT
    coc_call_results.date_called::Date AS date
    , 'Dial' AS contact_type
    , coc_call_results.id::varchar AS contact_id
    , coc_call_results.voter_id::varchar
    , NULL::bigint AS sender_phone
    , CASE WHEN result = 'Talked to Correct Person' THEN '1' ELSE NULL END AS conversation_flag
  FROM tmc_thrutalk.coc_call_results
  WHERE coc_call_results.service_account = 'coc_{{state}}_voters'
    AND coc_call_results.date_called BETWEEN '{{start_date}}' AND '{{end_date}}'
)

/* This second CTE for ThruTalk has information on how many staff/volunteers were doing the calling. Due to the ThruTalk
table structure, the caller information incompletely joins to the call information. Therefore, caller ids are in this CTE
so they can be counted in the dashboard. */
, thrutalk_2 AS (
  SELECT DISTINCT
    coc_callers.date::Date AS date
    ,'Dial' AS contact_type
    , NULL::varchar AS contact_id
    , NULL::varchar AS voter_id
    , coc_callers.phone::bigint AS sender_phone
    , NULL::varchar AS conversation_flag
  FROM tmc_thrutalk.coc_callers
  WHERE coc_callers.service_account = 'coc_{{state}}_voters'
    AND coc_callers.date BETWEEN '{{start_date}}' AND '{{end_date}}'
 )

, thrutext_base AS (
  SELECT 
    coc_messages.ttimestamp::Date AS date
    , 'Text' AS contact_type
    , coc_messages.conversation_id::varchar AS contact_id
    , thrutext_messages_append.van_id::varchar AS voter_id
    , (RIGHT(coc_messages.sender_phone, 10))::bigint AS sender_phone
    , CASE WHEN coc_messages.message_direction = 'incoming' THEN '1' ELSE NULL END AS conversation_flag
    , ROW_NUMBER () OVER (PARTITION BY coc_messages.conversation_id ORDER BY conversation_flag DESC NULLS LAST) AS dupes_ranked
    -- ^ Field needed to dedup message id and get one record per conversation id
  FROM tmc_thrutext.coc_messages
  LEFT JOIN coc_reporting.thrutext_messages_append
    ON thrutext_messages_append.conversation_id = coc_messages.conversation_id
  WHERE ({{thrutext_campaign_name}})
    AND coc_messages.ttimestamp BETWEEN '{{start_date}}' AND '{{end_date}}'
    AND coc_messages.import_source iLIKE 'colorofchange{{state_abr}}%'
)

/*This CTE to dedup the ThruText data.*/
, thrutext AS (
  SELECT date, contact_type, contact_id, voter_id, sender_phone, conversation_flag
  FROM thrutext_base
  WHERE dupes_ranked = 1
)


, combine AS (
  SELECT * FROM thrutalk_1
  UNION ALL
  SELECT * FROM thrutalk_2
  UNION ALL
  SELECT * FROM thrutext
)


/*This Final Select joins to the voterfile to bring in the latitude and longitude of the voter.*/
SELECT 
  '{{election_name}}' AS election
    -- ^This field added because it will be used in a dashboard that can be filtered to see different races on the same page.
  , combine.* 
  , ROUND(vb_tsmart_latitude, 2) AS latitude
  , ROUND(vb_tsmart_longitude, 2) AS longitude
FROM combine
LEFT JOIN ts.ntl_current
  ON combine.voter_id = ntl_current.vb_smartvan_id
  AND vb_vf_source_state iLIKE '{{state_abr}}'
  -- ^ Filtering, since the voter_id is unique by state
  AND vb_tsmart_state iLIKE '{{state_abr}}'
  -- ^ Filtering location data to regions within the state, for the latitude and longitude
)
;

  -- Grant access:
GRANT SELECT ON coc_reporting.pacraces_20212022_votercontact TO GROUP coc;
GRANT ALL ON coc_reporting.pacraces_20212022_votercontact TO jshang, jharris1;



----
/* LIT DROPS 
https://platform.civisanalytics.com/spa/#/scripts/sql/121465872 */

/* This table belongs to a set of base tables that pull important metrics for assessing our work on PAC races.
Here we are looking at the Manhattan DA Race 2021-06

This table brings in the number of people and doors that lit was dropped off at. The select has the date, vanid of the 
voter, and address id.
*/

DELETE FROM coc_reporting.pacraces_20212022_litdrops WHERE election = '{{election_name}}';
INSERT INTO coc_reporting.pacraces_20212022_litdrops (


SELECT DISTINCT
  '{{election_name}}' AS election
    -- ^This field added because it will be used in a dashboard that can be filtered to see different races on the same page.
  , survey.surveyresponseid AS contact_id
  , 'Lit Drop' AS contact_type
  , (LEFT(survey.datecanvassed, 10))::Date AS date
  , survey.vanid
  , vb_tsmart_exact_address_track AS address
FROM tmc_van.coc_contactssurveyresponses_vf as survey
LEFT JOIN tmc_van.coc_surveyquestions AS survey_questions
  ON survey.surveyquestionid = survey_questions.surveyquestionid
LEFT JOIN tmc_van.coc_surveyresponses AS survey_responses
  ON survey.surveyresponseid = survey_responses.surveyresponseid
LEFT JOIN ts.ntl_current AS vf
 ON vf.vb_smartvan_id = survey.vanid
 AND statecode = vf.vb_tsmart_state
WHERE survey.committeeid IN ('65411') ---- PAC committee id 
  AND survey_responses.surveyquestionid = '452795' -- Survey question for lit drop
  AND statecode iLIKE '{{state_abr}}' -- filter to state VAN instance
)
;
  
-- Grant access:
GRANT SELECT ON coc_reporting.pacraces_20212022_litdrops TO GROUP coc;
GRANT ALL ON coc_reporting.pacraces_20212022_litdrops TO jshang, jharris1;



----
/* VOLUNTEER ENGAGEMENT
https://platform.civisanalytics.com/spa/#/scripts/sql/120922841 */

/* This table belongs to a set of base tables that pull important metrics for assessing our work on PAC races.
Here we are looking at the Manhattan DA Race 2021-06

This table brings on information on our Volunteer Engagement for the race. The select includes events, users who
completed attending the event, and whether the event was a lit drop.

It references the coc_reporting.mob_eventattendance table. You can see the code here
https://platform.civisanalytics.com/spa/#/scripts/sql/101066205
This table brings in event and attendee informaiton from Mobilize.
*/


DELETE FROM coc_reporting.pacraces_20212022_volengagement WHERE election = '{{election_name}}';
INSERT INTO coc_reporting.pacraces_20212022_volengagement (


SELECT
  '{{election_name}}' AS election
    -- ^This field added because it will be used in a dashboard that can be filtered to see different races on the same page.
  , mob_eventid AS event_id
  , mob_date AS event_date
  , mob_eventname AS event_name
  , mob_userid AS user_id
  , CASE WHEN mob_eventname iLike '%Lit Drop%' THEN 1 
      WHEN mob_eventname iLike '%Canvass%' THEN 1 
      WHEN mob_eventname iLike '%Walk and Talk%' THEN 1 
      ELSE NULL END AS litdrop_flag
FROM coc_reporting.mob_eventattendance 
WHERE mob_source = 'Mobilize PAC'
  AND mob_date BETWEEN '{{start_date}}' AND '{{end_date}}'
  AND ({{mobilize_event_name}})
  AND mob_eventname NOT iLIKE '%Cancelled%'
)
;


-- Grant access:
GRANT SELECT ON coc_reporting.pacraces_20212022_volengagement TO GROUP coc;
GRANT ALL ON coc_reporting.pacraces_20212022_volengagement TO jshang, jharris1;



----
/* EVENT RSVPS
https://platform.civisanalytics.com/spa/#/scripts/sql/120923450 */

/* This table belongs to a set of base tables that pull important metrics for assessing our work on PAC races.
Here we are looking at the Manhattan DA Race 2021-06

This table brings in the Number of RSVPs to events. The final select has all the event ids from Mobilize and
EveryAction, and the attendee ids of everyone who signed up.
*/


DELETE FROM coc_reporting.pacraces_20212022_eventrsvps WHERE election = '{{election_name}}';
INSERT INTO coc_reporting.pacraces_20212022_eventrsvps (


/* This CTE references the coc_reporting.mob_eventattendance table. You can see the code here
https://platform.civisanalytics.com/spa/#/scripts/sql/101066205
This table brings in event and attendee informaiton from Mobilize. */
WITH mob_events AS (
SELECT DISTINCT 
  mob_eventid
  , mob_date
  , mob_eventname
  , mob_vaneventid
FROM coc_reporting.mob_eventattendance 
WHERE mob_source = 'Mobilize PAC'
  AND mob_date BETWEEN '{{start_date}}' AND '{{end_date}}'
 AND ({{mobilize_event_name}})
  AND mob_eventname NOT LIKE '%Cancelled%'
)

/* The mob_events CTE brings in events for the race. However, in the table it's referencing it doesn't include event
sign ups, only completed attendances. Therefore, we are joining to EveryAction to bring in sign up information. */
, ea_base AS (
SELECT
  mob_eventid
  , mob_date
  , mob_eventname
  , coc_events.eventid
  , coc_eventsignups.vanid AS ea_attendeesid
  	, ROW_NUMBER () OVER (PARTITION BY coc_events.eventid, coc_eventsignups.vanid ORDER BY coc_eventsignupsstatuses.datemodified DESC) AS ea_signupdupe
  	-- ^For deduping eventsignups by most recent sign up status
  
FROM mob_events
LEFT JOIN tmc_van.coc_events
  ON mob_events.mob_vaneventid = coc_events.eventid
LEFT JOIN tmc_van.coc_eventsignups
	ON coc_events.eventid = coc_eventsignups.eventid
LEFT JOIN tmc_van.coc_eventsignupsstatuses
 	ON coc_eventsignups.eventsignupid = coc_eventsignupsstatuses.eventsignupid

WHERE coc_eventsignups.eventrolename = 'Attendee'
    -- ^Filter for 'Attendee' only, as opposed to Host or Host Committee.
  AND coc_eventsignupsstatuses.eventstatusname <> 'Invited'
  AND coc_eventsignupsstatuses.eventstatusname <> 'Declined'
    -- 
)

SELECT 
  '{{election_name}}' AS election
    -- ^This field added because it will be used in a dashboard that can be filtered to see different races on the same page.
  , mob_eventid
  , mob_date
  , mob_eventname
  , eventid AS ea_eventid
  , ea_attendeesid
FROM ea_base
WHERE ea_signupdupe = 1
)
;


-- Grant access:
GRANT SELECT ON coc_reporting.pacraces_20212022_eventrsvps TO GROUP coc;
GRANT ALL ON coc_reporting.pacraces_20212022_eventrsvps TO jshang, jharris1;



----
/* VOTER IDS 
https://platform.civisanalytics.com/spa/#/scripts/sql/121543067 */

/* This table belongs to a set of base tables that pull important metrics for assessing our work on PAC races.
Here we are looking at the Manhattan DA Race 2021-06

This table brings in the results of the survey questions we care about. For this race, we looked at DA Candidate ID,
Support Candidate, Voting Plan, and Vote Tripling.
*/


DELETE FROM coc_reporting.pacraces_20212022_voterids WHERE election = '{{election_name}}' ;
INSERT INTO coc_reporting.pacraces_20212022_voterids (


WITH base AS (
SELECT DISTINCT
  survey.datecanvassed::Date AS date
  , CASE WHEN survey.contacttypeid = 37 THEN 'Text'
      WHEN survey.contacttypeid = 1 THEN 'Dial'
      WHEN survey.contacttypeid = 2 THEN 'Canvass'
          END as contact_type
  , survey.surveyresponseid AS contact_id
  , survey_questions.surveyquestionid AS surveyquestion_id
  , survey_questions.surveyquestionname AS surveyquestion_name
  , survey_responses.surveyresponsename AS surveyquestion_response
  , survey.vanid
  , ROW_NUMBER() OVER (PARTITION BY surveyquestion_id, vanid ORDER BY date DESC) AS dedup_rank
      -- Creating a field to dedup in final select. There can be some duplicates in the data, if one person responds to the
      -- same question on different days / from a textathon and a phonebank. This keeps the most recent response.
FROM tmc_van.coc_contactssurveyresponses_vf as survey
LEFT JOIN tmc_van.coc_surveyquestions as survey_questions
  ON survey.surveyquestionid = survey_questions.surveyquestionid
LEFT JOIN tmc_van.coc_surveyresponses as survey_responses
  ON survey.surveyresponseid = survey_responses.surveyresponseid
WHERE survey.committeeid IN ('65411') ---- PAC committee id
  AND statecode iLike '{{state_abr}}' -- filter to state VAN instance
  AND survey.datecanvassed BETWEEN '{{start_date}}' AND '{{end_date}}'
  AND survey_questions.surveyquestionid IN ({{endorsement_surveyqs}}, '452631', '452637')
    /* Survey questions are: 
      Candidate ID ('452630' is DA Candidate ID),
      (452634) Consider Candidate: Will you consider voting for our endorsed candidate? 
      Voting Plan: How will you vote? 
      Vote Triple: Black Voter Challenge, Will you reach out to friends and make sure they have a plan to vote,
        and ask them to remind 3 more people? */
)

SELECT
  '{{election_name}}' AS election
    -- ^This field added because it will be used in a dashboard that can be filtered to see different races on the same page.
  , date
  , contact_type
  , contact_id
  , surveyquestion_id
  , surveyquestion_name
  , surveyquestion_response
  , vanid
FROM base
WHERE dedup_rank = 1
)
;


-- Grant access:
GRANT SELECT ON coc_reporting.pacraces_20212022_voterids TO GROUP coc;
GRANT ALL ON coc_reporting.pacraces_20212022_voterids TO jshang, jharris1;